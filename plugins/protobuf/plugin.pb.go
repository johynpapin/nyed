// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plugin.proto

package protobuf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegisterLanguageRequest struct {
	Filetype             string   `protobuf:"bytes,1,opt,name=filetype,proto3" json:"filetype,omitempty"`
	Queries              string   `protobuf:"bytes,2,opt,name=queries,proto3" json:"queries,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterLanguageRequest) Reset()         { *m = RegisterLanguageRequest{} }
func (m *RegisterLanguageRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterLanguageRequest) ProtoMessage()    {}
func (*RegisterLanguageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{0}
}

func (m *RegisterLanguageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterLanguageRequest.Unmarshal(m, b)
}
func (m *RegisterLanguageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterLanguageRequest.Marshal(b, m, deterministic)
}
func (m *RegisterLanguageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterLanguageRequest.Merge(m, src)
}
func (m *RegisterLanguageRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterLanguageRequest.Size(m)
}
func (m *RegisterLanguageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterLanguageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterLanguageRequest proto.InternalMessageInfo

func (m *RegisterLanguageRequest) GetFiletype() string {
	if m != nil {
		return m.Filetype
	}
	return ""
}

func (m *RegisterLanguageRequest) GetQueries() string {
	if m != nil {
		return m.Queries
	}
	return ""
}

type RegisterLanguageReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterLanguageReply) Reset()         { *m = RegisterLanguageReply{} }
func (m *RegisterLanguageReply) String() string { return proto.CompactTextString(m) }
func (*RegisterLanguageReply) ProtoMessage()    {}
func (*RegisterLanguageReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a625af4bc1cc87, []int{1}
}

func (m *RegisterLanguageReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterLanguageReply.Unmarshal(m, b)
}
func (m *RegisterLanguageReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterLanguageReply.Marshal(b, m, deterministic)
}
func (m *RegisterLanguageReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterLanguageReply.Merge(m, src)
}
func (m *RegisterLanguageReply) XXX_Size() int {
	return xxx_messageInfo_RegisterLanguageReply.Size(m)
}
func (m *RegisterLanguageReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterLanguageReply.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterLanguageReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RegisterLanguageRequest)(nil), "RegisterLanguageRequest")
	proto.RegisterType((*RegisterLanguageReply)(nil), "RegisterLanguageReply")
}

func init() {
	proto.RegisterFile("plugin.proto", fileDescriptor_22a625af4bc1cc87)
}

var fileDescriptor_22a625af4bc1cc87 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xc8, 0x29, 0x4d,
	0xcf, 0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xf2, 0xe7, 0x12, 0x0f, 0x4a, 0x4d, 0xcf,
	0x2c, 0x2e, 0x49, 0x2d, 0xf2, 0x49, 0xcc, 0x4b, 0x2f, 0x4d, 0x4c, 0x4f, 0x0d, 0x4a, 0x2d, 0x2c,
	0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe2, 0xe2, 0x48, 0xcb, 0xcc, 0x49, 0x2d, 0xa9, 0x2c, 0x48, 0x95,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf3, 0x85, 0x24, 0xb8, 0xd8, 0x0b, 0x4b, 0x53, 0x8b,
	0x32, 0x53, 0x8b, 0x25, 0x98, 0xc0, 0x52, 0x30, 0xae, 0x92, 0x38, 0x97, 0x28, 0xa6, 0x81, 0x05,
	0x39, 0x95, 0x46, 0x01, 0x5c, 0x6c, 0x01, 0x60, 0x9b, 0x85, 0xdc, 0xb8, 0x04, 0xd0, 0x95, 0x08,
	0x49, 0xe8, 0xe1, 0x70, 0x86, 0x94, 0x98, 0x1e, 0x56, 0xf3, 0x94, 0x18, 0x9c, 0xb8, 0xa2, 0x38,
	0xc0, 0x9e, 0x48, 0x2a, 0x4d, 0x4b, 0x62, 0x03, 0xb3, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x17, 0x00, 0xfa, 0x3e, 0xde, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PluginClient is the client API for Plugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PluginClient interface {
	RegisterLanguage(ctx context.Context, in *RegisterLanguageRequest, opts ...grpc.CallOption) (*RegisterLanguageReply, error)
}

type pluginClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginClient(cc grpc.ClientConnInterface) PluginClient {
	return &pluginClient{cc}
}

func (c *pluginClient) RegisterLanguage(ctx context.Context, in *RegisterLanguageRequest, opts ...grpc.CallOption) (*RegisterLanguageReply, error) {
	out := new(RegisterLanguageReply)
	err := c.cc.Invoke(ctx, "/Plugin/RegisterLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServer is the server API for Plugin service.
type PluginServer interface {
	RegisterLanguage(context.Context, *RegisterLanguageRequest) (*RegisterLanguageReply, error)
}

// UnimplementedPluginServer can be embedded to have forward compatible implementations.
type UnimplementedPluginServer struct {
}

func (*UnimplementedPluginServer) RegisterLanguage(ctx context.Context, req *RegisterLanguageRequest) (*RegisterLanguageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterLanguage not implemented")
}

func RegisterPluginServer(s *grpc.Server, srv PluginServer) {
	s.RegisterService(&_Plugin_serviceDesc, srv)
}

func _Plugin_RegisterLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).RegisterLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/RegisterLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).RegisterLanguage(ctx, req.(*RegisterLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Plugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Plugin",
	HandlerType: (*PluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterLanguage",
			Handler:    _Plugin_RegisterLanguage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}
